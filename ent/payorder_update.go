// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gobee/ent/payorder"
	"gobee/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PayOrderUpdate is the builder for updating PayOrder entities.
type PayOrderUpdate struct {
	config
	hooks    []Hook
	mutation *PayOrderMutation
}

// Where appends a list predicates to the PayOrderUpdate builder.
func (_u *PayOrderUpdate) Where(ps ...predicate.PayOrder) *PayOrderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PayOrderUpdate) SetUpdatedAt(v time.Time) *PayOrderUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetChannelID sets the "channel_id" field.
func (_u *PayOrderUpdate) SetChannelID(v string) *PayOrderUpdate {
	_u.mutation.SetChannelID(v)
	return _u
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableChannelID(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetChannelID(*v)
	}
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *PayOrderUpdate) SetOrderID(v string) *PayOrderUpdate {
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableOrderID(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// SetOutTradeNo sets the "out_trade_no" field.
func (_u *PayOrderUpdate) SetOutTradeNo(v string) *PayOrderUpdate {
	_u.mutation.SetOutTradeNo(v)
	return _u
}

// SetNillableOutTradeNo sets the "out_trade_no" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableOutTradeNo(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetOutTradeNo(*v)
	}
	return _u
}

// SetTotalFee sets the "total_fee" field.
func (_u *PayOrderUpdate) SetTotalFee(v string) *PayOrderUpdate {
	_u.mutation.SetTotalFee(v)
	return _u
}

// SetNillableTotalFee sets the "total_fee" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableTotalFee(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetTotalFee(*v)
	}
	return _u
}

// SetSubject sets the "subject" field.
func (_u *PayOrderUpdate) SetSubject(v string) *PayOrderUpdate {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableSubject(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// SetBody sets the "body" field.
func (_u *PayOrderUpdate) SetBody(v string) *PayOrderUpdate {
	_u.mutation.SetBody(v)
	return _u
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableBody(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetBody(*v)
	}
	return _u
}

// SetNotifyURL sets the "notify_url" field.
func (_u *PayOrderUpdate) SetNotifyURL(v string) *PayOrderUpdate {
	_u.mutation.SetNotifyURL(v)
	return _u
}

// SetNillableNotifyURL sets the "notify_url" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableNotifyURL(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetNotifyURL(*v)
	}
	return _u
}

// SetReturnURL sets the "return_url" field.
func (_u *PayOrderUpdate) SetReturnURL(v string) *PayOrderUpdate {
	_u.mutation.SetReturnURL(v)
	return _u
}

// SetNillableReturnURL sets the "return_url" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableReturnURL(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetReturnURL(*v)
	}
	return _u
}

// SetExtra sets the "extra" field.
func (_u *PayOrderUpdate) SetExtra(v string) *PayOrderUpdate {
	_u.mutation.SetExtra(v)
	return _u
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableExtra(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetExtra(*v)
	}
	return _u
}

// SetPayURL sets the "pay_url" field.
func (_u *PayOrderUpdate) SetPayURL(v string) *PayOrderUpdate {
	_u.mutation.SetPayURL(v)
	return _u
}

// SetNillablePayURL sets the "pay_url" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillablePayURL(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetPayURL(*v)
	}
	return _u
}

// ClearPayURL clears the value of the "pay_url" field.
func (_u *PayOrderUpdate) ClearPayURL() *PayOrderUpdate {
	_u.mutation.ClearPayURL()
	return _u
}

// SetState sets the "state" field.
func (_u *PayOrderUpdate) SetState(v string) *PayOrderUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableState(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetErrorMsg sets the "error_msg" field.
func (_u *PayOrderUpdate) SetErrorMsg(v string) *PayOrderUpdate {
	_u.mutation.SetErrorMsg(v)
	return _u
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableErrorMsg(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetErrorMsg(*v)
	}
	return _u
}

// ClearErrorMsg clears the value of the "error_msg" field.
func (_u *PayOrderUpdate) ClearErrorMsg() *PayOrderUpdate {
	_u.mutation.ClearErrorMsg()
	return _u
}

// SetRaw sets the "raw" field.
func (_u *PayOrderUpdate) SetRaw(v string) *PayOrderUpdate {
	_u.mutation.SetRaw(v)
	return _u
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (_u *PayOrderUpdate) SetNillableRaw(v *string) *PayOrderUpdate {
	if v != nil {
		_u.SetRaw(*v)
	}
	return _u
}

// ClearRaw clears the value of the "raw" field.
func (_u *PayOrderUpdate) ClearRaw() *PayOrderUpdate {
	_u.mutation.ClearRaw()
	return _u
}

// Mutation returns the PayOrderMutation object of the builder.
func (_u *PayOrderUpdate) Mutation() *PayOrderMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PayOrderUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PayOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PayOrderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PayOrderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PayOrderUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := payorder.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *PayOrderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(payorder.Table, payorder.Columns, sqlgraph.NewFieldSpec(payorder.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(payorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ChannelID(); ok {
		_spec.SetField(payorder.FieldChannelID, field.TypeString, value)
	}
	if value, ok := _u.mutation.OrderID(); ok {
		_spec.SetField(payorder.FieldOrderID, field.TypeString, value)
	}
	if value, ok := _u.mutation.OutTradeNo(); ok {
		_spec.SetField(payorder.FieldOutTradeNo, field.TypeString, value)
	}
	if value, ok := _u.mutation.TotalFee(); ok {
		_spec.SetField(payorder.FieldTotalFee, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(payorder.FieldSubject, field.TypeString, value)
	}
	if value, ok := _u.mutation.Body(); ok {
		_spec.SetField(payorder.FieldBody, field.TypeString, value)
	}
	if value, ok := _u.mutation.NotifyURL(); ok {
		_spec.SetField(payorder.FieldNotifyURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReturnURL(); ok {
		_spec.SetField(payorder.FieldReturnURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Extra(); ok {
		_spec.SetField(payorder.FieldExtra, field.TypeString, value)
	}
	if value, ok := _u.mutation.PayURL(); ok {
		_spec.SetField(payorder.FieldPayURL, field.TypeString, value)
	}
	if _u.mutation.PayURLCleared() {
		_spec.ClearField(payorder.FieldPayURL, field.TypeString)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(payorder.FieldState, field.TypeString, value)
	}
	if value, ok := _u.mutation.ErrorMsg(); ok {
		_spec.SetField(payorder.FieldErrorMsg, field.TypeString, value)
	}
	if _u.mutation.ErrorMsgCleared() {
		_spec.ClearField(payorder.FieldErrorMsg, field.TypeString)
	}
	if value, ok := _u.mutation.Raw(); ok {
		_spec.SetField(payorder.FieldRaw, field.TypeString, value)
	}
	if _u.mutation.RawCleared() {
		_spec.ClearField(payorder.FieldRaw, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PayOrderUpdateOne is the builder for updating a single PayOrder entity.
type PayOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PayOrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PayOrderUpdateOne) SetUpdatedAt(v time.Time) *PayOrderUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetChannelID sets the "channel_id" field.
func (_u *PayOrderUpdateOne) SetChannelID(v string) *PayOrderUpdateOne {
	_u.mutation.SetChannelID(v)
	return _u
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableChannelID(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetChannelID(*v)
	}
	return _u
}

// SetOrderID sets the "order_id" field.
func (_u *PayOrderUpdateOne) SetOrderID(v string) *PayOrderUpdateOne {
	_u.mutation.SetOrderID(v)
	return _u
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableOrderID(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetOrderID(*v)
	}
	return _u
}

// SetOutTradeNo sets the "out_trade_no" field.
func (_u *PayOrderUpdateOne) SetOutTradeNo(v string) *PayOrderUpdateOne {
	_u.mutation.SetOutTradeNo(v)
	return _u
}

// SetNillableOutTradeNo sets the "out_trade_no" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableOutTradeNo(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetOutTradeNo(*v)
	}
	return _u
}

// SetTotalFee sets the "total_fee" field.
func (_u *PayOrderUpdateOne) SetTotalFee(v string) *PayOrderUpdateOne {
	_u.mutation.SetTotalFee(v)
	return _u
}

// SetNillableTotalFee sets the "total_fee" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableTotalFee(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetTotalFee(*v)
	}
	return _u
}

// SetSubject sets the "subject" field.
func (_u *PayOrderUpdateOne) SetSubject(v string) *PayOrderUpdateOne {
	_u.mutation.SetSubject(v)
	return _u
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableSubject(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetSubject(*v)
	}
	return _u
}

// SetBody sets the "body" field.
func (_u *PayOrderUpdateOne) SetBody(v string) *PayOrderUpdateOne {
	_u.mutation.SetBody(v)
	return _u
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableBody(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetBody(*v)
	}
	return _u
}

// SetNotifyURL sets the "notify_url" field.
func (_u *PayOrderUpdateOne) SetNotifyURL(v string) *PayOrderUpdateOne {
	_u.mutation.SetNotifyURL(v)
	return _u
}

// SetNillableNotifyURL sets the "notify_url" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableNotifyURL(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetNotifyURL(*v)
	}
	return _u
}

// SetReturnURL sets the "return_url" field.
func (_u *PayOrderUpdateOne) SetReturnURL(v string) *PayOrderUpdateOne {
	_u.mutation.SetReturnURL(v)
	return _u
}

// SetNillableReturnURL sets the "return_url" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableReturnURL(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetReturnURL(*v)
	}
	return _u
}

// SetExtra sets the "extra" field.
func (_u *PayOrderUpdateOne) SetExtra(v string) *PayOrderUpdateOne {
	_u.mutation.SetExtra(v)
	return _u
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableExtra(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetExtra(*v)
	}
	return _u
}

// SetPayURL sets the "pay_url" field.
func (_u *PayOrderUpdateOne) SetPayURL(v string) *PayOrderUpdateOne {
	_u.mutation.SetPayURL(v)
	return _u
}

// SetNillablePayURL sets the "pay_url" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillablePayURL(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetPayURL(*v)
	}
	return _u
}

// ClearPayURL clears the value of the "pay_url" field.
func (_u *PayOrderUpdateOne) ClearPayURL() *PayOrderUpdateOne {
	_u.mutation.ClearPayURL()
	return _u
}

// SetState sets the "state" field.
func (_u *PayOrderUpdateOne) SetState(v string) *PayOrderUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableState(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetErrorMsg sets the "error_msg" field.
func (_u *PayOrderUpdateOne) SetErrorMsg(v string) *PayOrderUpdateOne {
	_u.mutation.SetErrorMsg(v)
	return _u
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableErrorMsg(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetErrorMsg(*v)
	}
	return _u
}

// ClearErrorMsg clears the value of the "error_msg" field.
func (_u *PayOrderUpdateOne) ClearErrorMsg() *PayOrderUpdateOne {
	_u.mutation.ClearErrorMsg()
	return _u
}

// SetRaw sets the "raw" field.
func (_u *PayOrderUpdateOne) SetRaw(v string) *PayOrderUpdateOne {
	_u.mutation.SetRaw(v)
	return _u
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (_u *PayOrderUpdateOne) SetNillableRaw(v *string) *PayOrderUpdateOne {
	if v != nil {
		_u.SetRaw(*v)
	}
	return _u
}

// ClearRaw clears the value of the "raw" field.
func (_u *PayOrderUpdateOne) ClearRaw() *PayOrderUpdateOne {
	_u.mutation.ClearRaw()
	return _u
}

// Mutation returns the PayOrderMutation object of the builder.
func (_u *PayOrderUpdateOne) Mutation() *PayOrderMutation {
	return _u.mutation
}

// Where appends a list predicates to the PayOrderUpdate builder.
func (_u *PayOrderUpdateOne) Where(ps ...predicate.PayOrder) *PayOrderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PayOrderUpdateOne) Select(field string, fields ...string) *PayOrderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PayOrder entity.
func (_u *PayOrderUpdateOne) Save(ctx context.Context) (*PayOrder, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PayOrderUpdateOne) SaveX(ctx context.Context) *PayOrder {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PayOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PayOrderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PayOrderUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := payorder.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *PayOrderUpdateOne) sqlSave(ctx context.Context) (_node *PayOrder, err error) {
	_spec := sqlgraph.NewUpdateSpec(payorder.Table, payorder.Columns, sqlgraph.NewFieldSpec(payorder.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PayOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payorder.FieldID)
		for _, f := range fields {
			if !payorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(payorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ChannelID(); ok {
		_spec.SetField(payorder.FieldChannelID, field.TypeString, value)
	}
	if value, ok := _u.mutation.OrderID(); ok {
		_spec.SetField(payorder.FieldOrderID, field.TypeString, value)
	}
	if value, ok := _u.mutation.OutTradeNo(); ok {
		_spec.SetField(payorder.FieldOutTradeNo, field.TypeString, value)
	}
	if value, ok := _u.mutation.TotalFee(); ok {
		_spec.SetField(payorder.FieldTotalFee, field.TypeString, value)
	}
	if value, ok := _u.mutation.Subject(); ok {
		_spec.SetField(payorder.FieldSubject, field.TypeString, value)
	}
	if value, ok := _u.mutation.Body(); ok {
		_spec.SetField(payorder.FieldBody, field.TypeString, value)
	}
	if value, ok := _u.mutation.NotifyURL(); ok {
		_spec.SetField(payorder.FieldNotifyURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ReturnURL(); ok {
		_spec.SetField(payorder.FieldReturnURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Extra(); ok {
		_spec.SetField(payorder.FieldExtra, field.TypeString, value)
	}
	if value, ok := _u.mutation.PayURL(); ok {
		_spec.SetField(payorder.FieldPayURL, field.TypeString, value)
	}
	if _u.mutation.PayURLCleared() {
		_spec.ClearField(payorder.FieldPayURL, field.TypeString)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(payorder.FieldState, field.TypeString, value)
	}
	if value, ok := _u.mutation.ErrorMsg(); ok {
		_spec.SetField(payorder.FieldErrorMsg, field.TypeString, value)
	}
	if _u.mutation.ErrorMsgCleared() {
		_spec.ClearField(payorder.FieldErrorMsg, field.TypeString)
	}
	if value, ok := _u.mutation.Raw(); ok {
		_spec.SetField(payorder.FieldRaw, field.TypeString, value)
	}
	if _u.mutation.RawCleared() {
		_spec.ClearField(payorder.FieldRaw, field.TypeString)
	}
	_node = &PayOrder{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
