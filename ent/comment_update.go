// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gobee/ent/comment"
	"gobee/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (_u *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CommentUpdate) SetUpdatedAt(v time.Time) *CommentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPostID sets the "post_id" field.
func (_u *CommentUpdate) SetPostID(v int) *CommentUpdate {
	_u.mutation.ResetPostID()
	_u.mutation.SetPostID(v)
	return _u
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (_u *CommentUpdate) SetNillablePostID(v *int) *CommentUpdate {
	if v != nil {
		_u.SetPostID(*v)
	}
	return _u
}

// AddPostID adds value to the "post_id" field.
func (_u *CommentUpdate) AddPostID(v int) *CommentUpdate {
	_u.mutation.AddPostID(v)
	return _u
}

// SetPageID sets the "page_id" field.
func (_u *CommentUpdate) SetPageID(v int) *CommentUpdate {
	_u.mutation.ResetPageID()
	_u.mutation.SetPageID(v)
	return _u
}

// SetNillablePageID sets the "page_id" field if the given value is not nil.
func (_u *CommentUpdate) SetNillablePageID(v *int) *CommentUpdate {
	if v != nil {
		_u.SetPageID(*v)
	}
	return _u
}

// AddPageID adds value to the "page_id" field.
func (_u *CommentUpdate) AddPageID(v int) *CommentUpdate {
	_u.mutation.AddPageID(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *CommentUpdate) SetContent(v string) *CommentUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableContent(v *string) *CommentUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *CommentUpdate) SetUserID(v int) *CommentUpdate {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableUserID(v *int) *CommentUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *CommentUpdate) AddUserID(v int) *CommentUpdate {
	_u.mutation.AddUserID(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *CommentUpdate) SetStatus(v int) *CommentUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableStatus(v *int) *CommentUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CommentUpdate) AddStatus(v int) *CommentUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *CommentUpdate) SetUserAgent(v string) *CommentUpdate {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableUserAgent(v *string) *CommentUpdate {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *CommentUpdate) ClearUserAgent() *CommentUpdate {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *CommentUpdate) SetIPAddress(v string) *CommentUpdate {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableIPAddress(v *string) *CommentUpdate {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// SetIPLocation sets the "ip_location" field.
func (_u *CommentUpdate) SetIPLocation(v string) *CommentUpdate {
	_u.mutation.SetIPLocation(v)
	return _u
}

// SetNillableIPLocation sets the "ip_location" field if the given value is not nil.
func (_u *CommentUpdate) SetNillableIPLocation(v *string) *CommentUpdate {
	if v != nil {
		_u.SetIPLocation(*v)
	}
	return _u
}

// ClearIPLocation clears the value of the "ip_location" field.
func (_u *CommentUpdate) ClearIPLocation() *CommentUpdate {
	_u.mutation.ClearIPLocation()
	return _u
}

// SetPinned sets the "pinned" field.
func (_u *CommentUpdate) SetPinned(v bool) *CommentUpdate {
	_u.mutation.SetPinned(v)
	return _u
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (_u *CommentUpdate) SetNillablePinned(v *bool) *CommentUpdate {
	if v != nil {
		_u.SetPinned(*v)
	}
	return _u
}

// Mutation returns the CommentMutation object of the builder.
func (_u *CommentUpdate) Mutation() *CommentMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CommentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CommentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CommentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CommentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CommentUpdate) check() error {
	if v, ok := _u.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IPLocation(); ok {
		if err := comment.IPLocationValidator(v); err != nil {
			return &ValidationError{Name: "ip_location", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_location": %w`, err)}
		}
	}
	return nil
}

func (_u *CommentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PostID(); ok {
		_spec.SetField(comment.FieldPostID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPostID(); ok {
		_spec.AddField(comment.FieldPostID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PageID(); ok {
		_spec.SetField(comment.FieldPageID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPageID(); ok {
		_spec.AddField(comment.FieldPageID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(comment.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(comment.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.IPLocation(); ok {
		_spec.SetField(comment.FieldIPLocation, field.TypeString, value)
	}
	if _u.mutation.IPLocationCleared() {
		_spec.ClearField(comment.FieldIPLocation, field.TypeString)
	}
	if value, ok := _u.mutation.Pinned(); ok {
		_spec.SetField(comment.FieldPinned, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CommentUpdateOne) SetUpdatedAt(v time.Time) *CommentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPostID sets the "post_id" field.
func (_u *CommentUpdateOne) SetPostID(v int) *CommentUpdateOne {
	_u.mutation.ResetPostID()
	_u.mutation.SetPostID(v)
	return _u
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillablePostID(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetPostID(*v)
	}
	return _u
}

// AddPostID adds value to the "post_id" field.
func (_u *CommentUpdateOne) AddPostID(v int) *CommentUpdateOne {
	_u.mutation.AddPostID(v)
	return _u
}

// SetPageID sets the "page_id" field.
func (_u *CommentUpdateOne) SetPageID(v int) *CommentUpdateOne {
	_u.mutation.ResetPageID()
	_u.mutation.SetPageID(v)
	return _u
}

// SetNillablePageID sets the "page_id" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillablePageID(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetPageID(*v)
	}
	return _u
}

// AddPageID adds value to the "page_id" field.
func (_u *CommentUpdateOne) AddPageID(v int) *CommentUpdateOne {
	_u.mutation.AddPageID(v)
	return _u
}

// SetContent sets the "content" field.
func (_u *CommentUpdateOne) SetContent(v string) *CommentUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableContent(v *string) *CommentUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *CommentUpdateOne) SetUserID(v int) *CommentUpdateOne {
	_u.mutation.ResetUserID()
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableUserID(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// AddUserID adds value to the "user_id" field.
func (_u *CommentUpdateOne) AddUserID(v int) *CommentUpdateOne {
	_u.mutation.AddUserID(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *CommentUpdateOne) SetStatus(v int) *CommentUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableStatus(v *int) *CommentUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *CommentUpdateOne) AddStatus(v int) *CommentUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetUserAgent sets the "user_agent" field.
func (_u *CommentUpdateOne) SetUserAgent(v string) *CommentUpdateOne {
	_u.mutation.SetUserAgent(v)
	return _u
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableUserAgent(v *string) *CommentUpdateOne {
	if v != nil {
		_u.SetUserAgent(*v)
	}
	return _u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (_u *CommentUpdateOne) ClearUserAgent() *CommentUpdateOne {
	_u.mutation.ClearUserAgent()
	return _u
}

// SetIPAddress sets the "ip_address" field.
func (_u *CommentUpdateOne) SetIPAddress(v string) *CommentUpdateOne {
	_u.mutation.SetIPAddress(v)
	return _u
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableIPAddress(v *string) *CommentUpdateOne {
	if v != nil {
		_u.SetIPAddress(*v)
	}
	return _u
}

// SetIPLocation sets the "ip_location" field.
func (_u *CommentUpdateOne) SetIPLocation(v string) *CommentUpdateOne {
	_u.mutation.SetIPLocation(v)
	return _u
}

// SetNillableIPLocation sets the "ip_location" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillableIPLocation(v *string) *CommentUpdateOne {
	if v != nil {
		_u.SetIPLocation(*v)
	}
	return _u
}

// ClearIPLocation clears the value of the "ip_location" field.
func (_u *CommentUpdateOne) ClearIPLocation() *CommentUpdateOne {
	_u.mutation.ClearIPLocation()
	return _u
}

// SetPinned sets the "pinned" field.
func (_u *CommentUpdateOne) SetPinned(v bool) *CommentUpdateOne {
	_u.mutation.SetPinned(v)
	return _u
}

// SetNillablePinned sets the "pinned" field if the given value is not nil.
func (_u *CommentUpdateOne) SetNillablePinned(v *bool) *CommentUpdateOne {
	if v != nil {
		_u.SetPinned(*v)
	}
	return _u
}

// Mutation returns the CommentMutation object of the builder.
func (_u *CommentUpdateOne) Mutation() *CommentMutation {
	return _u.mutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (_u *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Comment entity.
func (_u *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CommentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CommentUpdateOne) check() error {
	if v, ok := _u.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IPLocation(); ok {
		if err := comment.IPLocationValidator(v); err != nil {
			return &ValidationError{Name: "ip_location", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_location": %w`, err)}
		}
	}
	return nil
}

func (_u *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PostID(); ok {
		_spec.SetField(comment.FieldPostID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPostID(); ok {
		_spec.AddField(comment.FieldPostID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PageID(); ok {
		_spec.SetField(comment.FieldPageID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPageID(); ok {
		_spec.AddField(comment.FieldPageID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(comment.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUserID(); ok {
		_spec.AddField(comment.FieldUserID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
	}
	if _u.mutation.UserAgentCleared() {
		_spec.ClearField(comment.FieldUserAgent, field.TypeString)
	}
	if value, ok := _u.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.IPLocation(); ok {
		_spec.SetField(comment.FieldIPLocation, field.TypeString, value)
	}
	if _u.mutation.IPLocationCleared() {
		_spec.ClearField(comment.FieldIPLocation, field.TypeString)
	}
	if value, ok := _u.mutation.Pinned(); ok {
		_spec.SetField(comment.FieldPinned, field.TypeBool, value)
	}
	_node = &Comment{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
