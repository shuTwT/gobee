// Code generated by ent, DO NOT EDIT.

package payorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the payorder type in the database.
	Label = "pay_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldOutTradeNo holds the string denoting the out_trade_no field in the database.
	FieldOutTradeNo = "out_trade_no"
	// FieldTotalFee holds the string denoting the total_fee field in the database.
	FieldTotalFee = "total_fee"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldNotifyURL holds the string denoting the notify_url field in the database.
	FieldNotifyURL = "notify_url"
	// FieldReturnURL holds the string denoting the return_url field in the database.
	FieldReturnURL = "return_url"
	// FieldExtra holds the string denoting the extra field in the database.
	FieldExtra = "extra"
	// FieldPayURL holds the string denoting the pay_url field in the database.
	FieldPayURL = "pay_url"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldErrorMsg holds the string denoting the error_msg field in the database.
	FieldErrorMsg = "error_msg"
	// FieldRaw holds the string denoting the raw field in the database.
	FieldRaw = "raw"
	// Table holds the table name of the payorder in the database.
	Table = "pay_orders"
)

// Columns holds all SQL columns for payorder fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldChannelID,
	FieldOrderID,
	FieldOutTradeNo,
	FieldTotalFee,
	FieldSubject,
	FieldBody,
	FieldNotifyURL,
	FieldReturnURL,
	FieldExtra,
	FieldPayURL,
	FieldState,
	FieldErrorMsg,
	FieldRaw,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState string
)

// OrderOption defines the ordering options for the PayOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByOutTradeNo orders the results by the out_trade_no field.
func ByOutTradeNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutTradeNo, opts...).ToFunc()
}

// ByTotalFee orders the results by the total_fee field.
func ByTotalFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalFee, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByNotifyURL orders the results by the notify_url field.
func ByNotifyURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyURL, opts...).ToFunc()
}

// ByReturnURL orders the results by the return_url field.
func ByReturnURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReturnURL, opts...).ToFunc()
}

// ByExtra orders the results by the extra field.
func ByExtra(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtra, opts...).ToFunc()
}

// ByPayURL orders the results by the pay_url field.
func ByPayURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayURL, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByErrorMsg orders the results by the error_msg field.
func ByErrorMsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMsg, opts...).ToFunc()
}

// ByRaw orders the results by the raw field.
func ByRaw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRaw, opts...).ToFunc()
}
