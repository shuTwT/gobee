// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gobee/ent/payorder"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PayOrderCreate is the builder for creating a PayOrder entity.
type PayOrderCreate struct {
	config
	mutation *PayOrderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *PayOrderCreate) SetCreatedAt(v time.Time) *PayOrderCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PayOrderCreate) SetNillableCreatedAt(v *time.Time) *PayOrderCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *PayOrderCreate) SetUpdatedAt(v time.Time) *PayOrderCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *PayOrderCreate) SetNillableUpdatedAt(v *time.Time) *PayOrderCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetChannelID sets the "channel_id" field.
func (_c *PayOrderCreate) SetChannelID(v string) *PayOrderCreate {
	_c.mutation.SetChannelID(v)
	return _c
}

// SetOrderID sets the "order_id" field.
func (_c *PayOrderCreate) SetOrderID(v string) *PayOrderCreate {
	_c.mutation.SetOrderID(v)
	return _c
}

// SetOutTradeNo sets the "out_trade_no" field.
func (_c *PayOrderCreate) SetOutTradeNo(v string) *PayOrderCreate {
	_c.mutation.SetOutTradeNo(v)
	return _c
}

// SetTotalFee sets the "total_fee" field.
func (_c *PayOrderCreate) SetTotalFee(v string) *PayOrderCreate {
	_c.mutation.SetTotalFee(v)
	return _c
}

// SetSubject sets the "subject" field.
func (_c *PayOrderCreate) SetSubject(v string) *PayOrderCreate {
	_c.mutation.SetSubject(v)
	return _c
}

// SetBody sets the "body" field.
func (_c *PayOrderCreate) SetBody(v string) *PayOrderCreate {
	_c.mutation.SetBody(v)
	return _c
}

// SetNotifyURL sets the "notify_url" field.
func (_c *PayOrderCreate) SetNotifyURL(v string) *PayOrderCreate {
	_c.mutation.SetNotifyURL(v)
	return _c
}

// SetReturnURL sets the "return_url" field.
func (_c *PayOrderCreate) SetReturnURL(v string) *PayOrderCreate {
	_c.mutation.SetReturnURL(v)
	return _c
}

// SetExtra sets the "extra" field.
func (_c *PayOrderCreate) SetExtra(v string) *PayOrderCreate {
	_c.mutation.SetExtra(v)
	return _c
}

// SetPayURL sets the "pay_url" field.
func (_c *PayOrderCreate) SetPayURL(v string) *PayOrderCreate {
	_c.mutation.SetPayURL(v)
	return _c
}

// SetNillablePayURL sets the "pay_url" field if the given value is not nil.
func (_c *PayOrderCreate) SetNillablePayURL(v *string) *PayOrderCreate {
	if v != nil {
		_c.SetPayURL(*v)
	}
	return _c
}

// SetState sets the "state" field.
func (_c *PayOrderCreate) SetState(v string) *PayOrderCreate {
	_c.mutation.SetState(v)
	return _c
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_c *PayOrderCreate) SetNillableState(v *string) *PayOrderCreate {
	if v != nil {
		_c.SetState(*v)
	}
	return _c
}

// SetErrorMsg sets the "error_msg" field.
func (_c *PayOrderCreate) SetErrorMsg(v string) *PayOrderCreate {
	_c.mutation.SetErrorMsg(v)
	return _c
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (_c *PayOrderCreate) SetNillableErrorMsg(v *string) *PayOrderCreate {
	if v != nil {
		_c.SetErrorMsg(*v)
	}
	return _c
}

// SetRaw sets the "raw" field.
func (_c *PayOrderCreate) SetRaw(v string) *PayOrderCreate {
	_c.mutation.SetRaw(v)
	return _c
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (_c *PayOrderCreate) SetNillableRaw(v *string) *PayOrderCreate {
	if v != nil {
		_c.SetRaw(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *PayOrderCreate) SetID(v uuid.UUID) *PayOrderCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *PayOrderCreate) SetNillableID(v *uuid.UUID) *PayOrderCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the PayOrderMutation object of the builder.
func (_c *PayOrderCreate) Mutation() *PayOrderMutation {
	return _c.mutation
}

// Save creates the PayOrder in the database.
func (_c *PayOrderCreate) Save(ctx context.Context) (*PayOrder, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PayOrderCreate) SaveX(ctx context.Context) *PayOrder {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PayOrderCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PayOrderCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PayOrderCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := payorder.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := payorder.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.State(); !ok {
		v := payorder.DefaultState
		_c.mutation.SetState(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := payorder.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PayOrderCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PayOrder.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PayOrder.updated_at"`)}
	}
	if _, ok := _c.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "PayOrder.channel_id"`)}
	}
	if _, ok := _c.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "PayOrder.order_id"`)}
	}
	if _, ok := _c.mutation.OutTradeNo(); !ok {
		return &ValidationError{Name: "out_trade_no", err: errors.New(`ent: missing required field "PayOrder.out_trade_no"`)}
	}
	if _, ok := _c.mutation.TotalFee(); !ok {
		return &ValidationError{Name: "total_fee", err: errors.New(`ent: missing required field "PayOrder.total_fee"`)}
	}
	if _, ok := _c.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "PayOrder.subject"`)}
	}
	if _, ok := _c.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "PayOrder.body"`)}
	}
	if _, ok := _c.mutation.NotifyURL(); !ok {
		return &ValidationError{Name: "notify_url", err: errors.New(`ent: missing required field "PayOrder.notify_url"`)}
	}
	if _, ok := _c.mutation.ReturnURL(); !ok {
		return &ValidationError{Name: "return_url", err: errors.New(`ent: missing required field "PayOrder.return_url"`)}
	}
	if _, ok := _c.mutation.Extra(); !ok {
		return &ValidationError{Name: "extra", err: errors.New(`ent: missing required field "PayOrder.extra"`)}
	}
	if _, ok := _c.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "PayOrder.state"`)}
	}
	return nil
}

func (_c *PayOrderCreate) sqlSave(ctx context.Context) (*PayOrder, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PayOrderCreate) createSpec() (*PayOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &PayOrder{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(payorder.Table, sqlgraph.NewFieldSpec(payorder.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(payorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(payorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.ChannelID(); ok {
		_spec.SetField(payorder.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := _c.mutation.OrderID(); ok {
		_spec.SetField(payorder.FieldOrderID, field.TypeString, value)
		_node.OrderID = value
	}
	if value, ok := _c.mutation.OutTradeNo(); ok {
		_spec.SetField(payorder.FieldOutTradeNo, field.TypeString, value)
		_node.OutTradeNo = value
	}
	if value, ok := _c.mutation.TotalFee(); ok {
		_spec.SetField(payorder.FieldTotalFee, field.TypeString, value)
		_node.TotalFee = value
	}
	if value, ok := _c.mutation.Subject(); ok {
		_spec.SetField(payorder.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := _c.mutation.Body(); ok {
		_spec.SetField(payorder.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := _c.mutation.NotifyURL(); ok {
		_spec.SetField(payorder.FieldNotifyURL, field.TypeString, value)
		_node.NotifyURL = value
	}
	if value, ok := _c.mutation.ReturnURL(); ok {
		_spec.SetField(payorder.FieldReturnURL, field.TypeString, value)
		_node.ReturnURL = value
	}
	if value, ok := _c.mutation.Extra(); ok {
		_spec.SetField(payorder.FieldExtra, field.TypeString, value)
		_node.Extra = value
	}
	if value, ok := _c.mutation.PayURL(); ok {
		_spec.SetField(payorder.FieldPayURL, field.TypeString, value)
		_node.PayURL = value
	}
	if value, ok := _c.mutation.State(); ok {
		_spec.SetField(payorder.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := _c.mutation.ErrorMsg(); ok {
		_spec.SetField(payorder.FieldErrorMsg, field.TypeString, value)
		_node.ErrorMsg = value
	}
	if value, ok := _c.mutation.Raw(); ok {
		_spec.SetField(payorder.FieldRaw, field.TypeString, value)
		_node.Raw = value
	}
	return _node, _spec
}

// PayOrderCreateBulk is the builder for creating many PayOrder entities in bulk.
type PayOrderCreateBulk struct {
	config
	err      error
	builders []*PayOrderCreate
}

// Save creates the PayOrder entities in the database.
func (_c *PayOrderCreateBulk) Save(ctx context.Context) ([]*PayOrder, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PayOrder, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PayOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PayOrderCreateBulk) SaveX(ctx context.Context) []*PayOrder {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PayOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PayOrderCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
