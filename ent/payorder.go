// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gobee/ent/payorder"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// PayOrder is the model entity for the PayOrder schema.
type PayOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 支付渠道ID
	ChannelID string `json:"channel_id,omitempty"`
	// 支付订单ID
	OrderID string `json:"order_id,omitempty"`
	// 商户订单号
	OutTradeNo string `json:"out_trade_no,omitempty"`
	// 订单金额
	TotalFee string `json:"total_fee,omitempty"`
	// 订单标题
	Subject string `json:"subject,omitempty"`
	// 订单描述
	Body string `json:"body,omitempty"`
	// 异步通知地址
	NotifyURL string `json:"notify_url,omitempty"`
	// 同步通知地址
	ReturnURL string `json:"return_url,omitempty"`
	// 额外参数
	Extra string `json:"extra,omitempty"`
	// 支付链接
	PayURL string `json:"pay_url,omitempty"`
	// 支付状态
	State string `json:"state,omitempty"`
	// 错误信息
	ErrorMsg string `json:"error_msg,omitempty"`
	// 原始响应
	Raw          string `json:"raw,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PayOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case payorder.FieldChannelID, payorder.FieldOrderID, payorder.FieldOutTradeNo, payorder.FieldTotalFee, payorder.FieldSubject, payorder.FieldBody, payorder.FieldNotifyURL, payorder.FieldReturnURL, payorder.FieldExtra, payorder.FieldPayURL, payorder.FieldState, payorder.FieldErrorMsg, payorder.FieldRaw:
			values[i] = new(sql.NullString)
		case payorder.FieldCreatedAt, payorder.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case payorder.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PayOrder fields.
func (_m *PayOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case payorder.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case payorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case payorder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case payorder.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				_m.ChannelID = value.String
			}
		case payorder.FieldOrderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				_m.OrderID = value.String
			}
		case payorder.FieldOutTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_trade_no", values[i])
			} else if value.Valid {
				_m.OutTradeNo = value.String
			}
		case payorder.FieldTotalFee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field total_fee", values[i])
			} else if value.Valid {
				_m.TotalFee = value.String
			}
		case payorder.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				_m.Subject = value.String
			}
		case payorder.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				_m.Body = value.String
			}
		case payorder.FieldNotifyURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notify_url", values[i])
			} else if value.Valid {
				_m.NotifyURL = value.String
			}
		case payorder.FieldReturnURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field return_url", values[i])
			} else if value.Valid {
				_m.ReturnURL = value.String
			}
		case payorder.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				_m.Extra = value.String
			}
		case payorder.FieldPayURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_url", values[i])
			} else if value.Valid {
				_m.PayURL = value.String
			}
		case payorder.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				_m.State = value.String
			}
		case payorder.FieldErrorMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_msg", values[i])
			} else if value.Valid {
				_m.ErrorMsg = value.String
			}
		case payorder.FieldRaw:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value.Valid {
				_m.Raw = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PayOrder.
// This includes values selected through modifiers, order, etc.
func (_m *PayOrder) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this PayOrder.
// Note that you need to call PayOrder.Unwrap() before calling this method if this PayOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PayOrder) Update() *PayOrderUpdateOne {
	return NewPayOrderClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PayOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PayOrder) Unwrap() *PayOrder {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PayOrder is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PayOrder) String() string {
	var builder strings.Builder
	builder.WriteString("PayOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(_m.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(_m.OrderID)
	builder.WriteString(", ")
	builder.WriteString("out_trade_no=")
	builder.WriteString(_m.OutTradeNo)
	builder.WriteString(", ")
	builder.WriteString("total_fee=")
	builder.WriteString(_m.TotalFee)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(_m.Subject)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(_m.Body)
	builder.WriteString(", ")
	builder.WriteString("notify_url=")
	builder.WriteString(_m.NotifyURL)
	builder.WriteString(", ")
	builder.WriteString("return_url=")
	builder.WriteString(_m.ReturnURL)
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(_m.Extra)
	builder.WriteString(", ")
	builder.WriteString("pay_url=")
	builder.WriteString(_m.PayURL)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(_m.State)
	builder.WriteString(", ")
	builder.WriteString("error_msg=")
	builder.WriteString(_m.ErrorMsg)
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(_m.Raw)
	builder.WriteByte(')')
	return builder.String()
}

// PayOrders is a parsable slice of PayOrder.
type PayOrders []*PayOrder
